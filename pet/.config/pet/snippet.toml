[[snippets]]
  description = "[macos] Restart video utilities on OS X (for when camera is on but video is black)"
  command = "sudo killall VDCAssistant && sudo killall AppleCameraAssistant"
  output = ""

[[snippets]]
  description = "[macos] Finding the pid listening on a specific port"
  command = "lsof -n -i4TCP:8000 | grep LISTEN"
  output = ""

[[snippets]]
  description = "[git] Delete all git branches with 'feature' in the name"
  command = "g br -D $(g br | grep feature | tr -d '\\n' | sed  's/\\n//g')"
  output = ""

[[snippets]]
  description = "[sed] Select line 736 from file out.log"
  command = "sed '736q;d' out.log"
  output = ""

[[snippets]]
  description = "[sed] Replace with capture group"
  command = "sed -r 's/^Reading line (.+)$/\\1/g'"
  output = ""

[[snippets]]
  description = "[xidel] xpath selector"
  command = "xidel --html --data index.html --xpath '//div[not(contains(@class, \"announcement\"))]/ul[@class=\"topiclist topics\"]/li[contains(@class, \"row\")]' --output-format=adhoc"
  output = ""

[[snippets]]
  description = "[pup] css selection"
  command = "cat index.html| pup 'ul.topiclist.topics > li.row > dl > dt > div.list-inner > a.topictitle text{}'"
  output = ""

[[snippets]]
  description = "[jq] timestamp"
  command = "grep $(date '+%F') foo.log | grep '\\\"_cmd\\\": \\\"tylenol\\\"' | grep '\\\"msg\\\": \\\"run' | jq '{timestamp: (.timestamp[:19] | strptime(\"%Y-%M-%dT%H:%M:%S\") | mktime), msg}' | jq -s '(.[1].timestamp - .[0].timestamp) / 60'"
  output = ""

[[snippets]]
  description = "[jq] group/select"
  command = "grep $(date '+%F') foo.log | grep '\\\"_cmd\\\": \\\"tylenol\\\"' | grep \"owner.statistics\" | jq -c '{owner_name, hits: .stats.relevant_hits}' | jq -c 'select(.hits > 0)' | sort | jq -c ."
  output = ""

[[snippets]]
  description = "[mlr] pretty print csv"
  command = "mlr --icsv --opprint cat nyc-east-river-bicycle-counts.csv"
  output = ""

[[snippets]]
  description = "[nix] Check battery"
  command = "upower -i /org/freedesktop/UPower/devices/battery_BAT0"
  output = ""

[[snippets]]
  description = "[nix] See routing table"
  command = "ip route list | column -t"
  output = ""

[[snippets]]
  description = "Print PATH entries on different lines"
  command = "echo $PATH |  tr ':' '\\n'"
  output = ""

[[snippets]]
  description = "Remove ._ prefix from files with zmv"
  command = "zmv '._(*)' '$1'"
  output = ""

[[snippets]]
  description = "Delete all helm deployments"
  command = "helm ls | tail -n+2 | awk '{print $1}' | xargs helm delete"
  output = ""

[[snippets]]
  description = "[macos] Get bundle identifier for application (MacOS)"
  command = "/usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' /Applications/TerminalVim.app/Contents/Info.plist"
  output = ""

[[snippets]]
  description = "Ping redis"
  command = "curl -w '\\n' http://<host>:6379/ping"
  output = ""

[[snippets]]
  description = "[git] Git rebase and prefer develop changes to the current branch's changes"
  command = "g rb -X ours develop"
  output = ""

[[snippets]]
  description = "[ghq] GHQ get a project from a self-hosted gitlab"
  command = "ghq get ssh://git@gitlab.my.host/group/rep -p"
  output = ""

[[snippets]]
  description = "[git] Add a git tag with a message to a specific SHA"
  command = "g tag -a v0.12-alpha.1 9318430 -m \"Nested entities init support\""
  output = ""

[[snippets]]
  description = "[git] Delete local tags and refresh by pulling from remote"
  command = "git tag -l | xargs git tag -d && git fetch --tags"
  output = ""

[[snippets]]
  description = "[find] Remove files in 'logs' dir with name matching '*MagicMock*' pattern"
  command = "find logs -name \"*MagicMock*\" | xargs -d '\\n' rm"
  output = ""

[[snippets]]
  description = "Highlight occurrences of 'pattern1' in input stream"
  command = "ack --passthru 'pattern1'"
  output = ""

[[snippets]]
  description = "Use ghostscript to extract text from a pdf"
  command = "ghost -dBATCH -dNOPAUSE -sDEVICE=txtwrite -sOutputFile=simple1.txt simple1.pdf"
  output = ""

[[snippets]]
  description = "Generate an XKCD password"
  command = "xkcdpass | tr ' ' '-'"
  output = ""

[[snippets]]
  description = "Get the first token in a whitespace delimited line"
  command = "awk '{print $1}'"
  output = ""

[[snippets]]
  description = "Print all lines in range"
  command = "sed -n '17388352 ,17388452p' filename"
  output = ""

[[snippets]]
  description = "Create file in multiple directories in one go"
  command = "touch data/{key,log}/.keep"
  output = ""

[[snippets]]
  description = "See who's listening on a port, linux"
  command = "netstat -ltnp | grep -w '8080'"
  output = ""

[[snippets]]
  description = "Mount a HFS+ disk for read/write"
  command = "sudo mount -t hfsplus -o force,rw /dev/sdb3 /home/mdzhang/usb"
  output = ""

[[snippets]]
  description = "create a arcanist revision without requesting review, but do notify user jsmith"
  command = "arc diff --plan-changes --cc jsmith master"
  output = ""

[[snippets]]
  description = "gzip a directory on macos"
  command = "tar cvf - pcap-parsed | gzip > pcap-parsed.gz"
  output = ""

[[snippets]]
  description = "unzip a macos gzip compressed w/ tar cvf"
  command = "tar xopf pcap-parsed.gz"
  output = ""

[[snippets]]
  description = "Update an existing diff starting at given commit\""
  command = "arc diff --plan-changes 8d2dda91 --update D28522"
  output = ""

[[snippets]]
  description = "Remove exited docker containers"
  command = "docker ps -a -q -f status=exited  | xargs docker rm"
  output = ""

[[snippets]]
  description = "Generate ubuntu crypt pass (python2)"
  command = "python -c \"from passlib.hash import sha512_crypt; import getpass,string,random; print sha512_crypt.using(salt=''.join([random.choice(string.ascii_letters + string.digits) for _ in range(16)]),rounds=5000).hash(getpass.getpass())\""
  output = ""

[[snippets]]
  description = "List largest S3 objects with size and key"
  command = "aws s3api list-object-versions --bucket my-bucket --query 'Versions[*].{Key: Key, Size: Size}'"
  output = ""

[[snippets]]
  description = "Get largest element by .Size attribute"
  command = "jq -c 'sort_by(.Size) | last | .Size'"
  output = ""

[[snippets]]
  description = "Get average size of files matching ls pattern in K"
  command = "la out*.pcap | awk '{print $5}' | rev | cut -c 2- | rev | Rscript -e 'd<-scan(\"stdin\", quiet=TRUE)' -e 'mean(d)'                                                                                         14:16:10"
  output = ""
